-- VHDL Entity project1_lib.receiver.symbol
--
-- Created:
--          by - kim705.ews (evrt-252-23.ews.illinois.edu)
--          at - 23:26:27 10/01/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY receiver IS
   PORT( 
      a     : IN     std_logic;
      b     : IN     std_logic;
      c     : IN     std_logic;
      d     : IN     std_logic;
      d0    : IN     std_logic_vector (19 DOWNTO 0);
      ce    : OUT    std_logic;
      dbus1 : OUT    std_logic_vector (4 DOWNTO 0);
      ie    : OUT    std_logic
   );

-- Declarations

END receiver ;

--
-- VHDL Architecture project1_lib.receiver.struct
--
-- Created:
--          by - kim705.ews (evrt-252-23.ews.illinois.edu)
--          at - 23:26:27 10/01/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.all;

LIBRARY project1_lib;

ARCHITECTURE struct OF receiver IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL cerror : std_logic;
   SIGNAL d_0    : std_logic;
   SIGNAL d_1    : std_logic;
   SIGNAL d_10   : std_logic;
   SIGNAL d_11   : std_logic;
   SIGNAL d_12   : std_logic;
   SIGNAL d_13   : std_logic;
   SIGNAL d_14   : std_logic;
   SIGNAL d_15   : std_logic;
   SIGNAL d_16   : std_logic;
   SIGNAL d_17   : std_logic;
   SIGNAL d_18   : std_logic;
   SIGNAL d_19   : std_logic;
   SIGNAL d_2    : std_logic;
   SIGNAL d_3    : std_logic;
   SIGNAL d_4    : std_logic;
   SIGNAL d_5    : std_logic;
   SIGNAL d_6    : std_logic;
   SIGNAL d_7    : std_logic;
   SIGNAL d_8    : std_logic;
   SIGNAL d_9    : std_logic;
   SIGNAL ierror : std_logic;
   SIGNAL o0     : std_logic;
   SIGNAL o1     : std_logic;
   SIGNAL o10    : std_logic;
   SIGNAL o11    : std_logic;
   SIGNAL o12    : std_logic;
   SIGNAL o13    : std_logic;
   SIGNAL o14    : std_logic;
   SIGNAL o15    : std_logic;
   SIGNAL o16    : std_logic;
   SIGNAL o17    : std_logic;
   SIGNAL o18    : std_logic;
   SIGNAL o19    : std_logic;
   SIGNAL o2     : std_logic;
   SIGNAL o3     : std_logic;
   SIGNAL o4     : std_logic;
   SIGNAL o5     : std_logic;
   SIGNAL o6     : std_logic;
   SIGNAL o7     : std_logic;
   SIGNAL o8     : std_logic;
   SIGNAL o9     : std_logic;
   SIGNAL x0     : std_logic;
   SIGNAL x1     : std_logic;
   SIGNAL x10    : std_logic;
   SIGNAL x11    : std_logic;
   SIGNAL x12    : std_logic;
   SIGNAL x13    : std_logic;
   SIGNAL x14    : std_logic;
   SIGNAL x2     : std_logic;
   SIGNAL x3     : std_logic;
   SIGNAL x4     : std_logic;
   SIGNAL x5     : std_logic;
   SIGNAL x6     : std_logic;
   SIGNAL x7     : std_logic;
   SIGNAL x8     : std_logic;
   SIGNAL x9     : std_logic;


   -- Component Declarations
   COMPONENT Corrector
   PORT (
      s0     : IN     std_logic ;
      s1     : IN     std_logic ;
      s2     : IN     std_logic ;
      F      : OUT    std_logic ;
      cerror : OUT    std_logic ;
      ierror : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ORgate5
   PORT (
      v : IN     std_logic;
      w : IN     std_logic;
      x : IN     std_logic;
      y : IN     std_logic;
      z : IN     std_logic;
      f : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Summing_Module
   PORT (
      a  : IN     std_logic ;
      b  : IN     std_logic ;
      c  : IN     std_logic ;
      d  : IN     std_logic ;
      x0 : OUT    std_logic ;
      x1 : OUT    std_logic ;
      x2 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT descrambler
   PORT (
      d0  : IN     std_logic ;
      d1  : IN     std_logic ;
      d2  : IN     std_logic ;
      d3  : IN     std_logic ;
      d_0 : OUT    std_logic ;
      d_1 : OUT    std_logic ;
      d_2 : OUT    std_logic ;
      d_3 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT unlock
   PORT (
      d0 : IN     std_logic ;
      d1 : IN     std_logic ;
      d2 : IN     std_logic ;
      d3 : IN     std_logic ;
      p0 : IN     std_logic ;
      p1 : IN     std_logic ;
      p2 : IN     std_logic ;
      p3 : IN     std_logic ;
      F  : OUT    std_logic ;
      F1 : OUT    std_logic ;
      F2 : OUT    std_logic ;
      F3 : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Corrector USE ENTITY project1_lib.Corrector;
   FOR ALL : ORgate5 USE ENTITY project1_lib.ORgate5;
   FOR ALL : Summing_Module USE ENTITY project1_lib.Summing_Module;
   FOR ALL : descrambler USE ENTITY project1_lib.descrambler;
   FOR ALL : unlock USE ENTITY project1_lib.unlock;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_3 : Corrector
      PORT MAP (
         s0     => x0,
         s1     => x1,
         s2     => x2,
         F      => dbus1(0),
         cerror => cerror,
         ierror => ierror
      );
   U_7 : Corrector
      PORT MAP (
         s0     => x4,
         s1     => x5,
         s2     => x3,
         F      => dbus1(1),
         cerror => cerror,
         ierror => ierror
      );
   U_11 : Corrector
      PORT MAP (
         s0     => x7,
         s1     => x8,
         s2     => x6,
         F      => dbus1(2),
         cerror => cerror,
         ierror => ierror
      );
   U_15 : Corrector
      PORT MAP (
         s0     => x9,
         s1     => x11,
         s2     => x10,
         F      => dbus1(3),
         cerror => cerror,
         ierror => ierror
      );
   U_19 : Corrector
      PORT MAP (
         s0     => x12,
         s1     => x14,
         s2     => x13,
         F      => dbus1(4),
         cerror => cerror,
         ierror => ierror
      );
   U_20 : ORgate5
      PORT MAP (
         v => ierror,
         w => ierror,
         x => ierror,
         y => ierror,
         z => ierror,
         f => ie
      );
   U_21 : ORgate5
      PORT MAP (
         v => cerror,
         w => cerror,
         x => cerror,
         y => cerror,
         z => cerror,
         f => ce
      );
   U_2 : Summing_Module
      PORT MAP (
         a  => o0,
         b  => o1,
         c  => o2,
         d  => o3,
         x0 => x0,
         x1 => x1,
         x2 => x2
      );
   U_6 : Summing_Module
      PORT MAP (
         a  => o4,
         b  => o5,
         c  => o6,
         d  => o7,
         x0 => x4,
         x1 => x5,
         x2 => x3
      );
   U_10 : Summing_Module
      PORT MAP (
         a  => o8,
         b  => o9,
         c  => o10,
         d  => o11,
         x0 => x7,
         x1 => x8,
         x2 => x6
      );
   U_14 : Summing_Module
      PORT MAP (
         a  => o13,
         b  => o14,
         c  => o12,
         d  => o15,
         x0 => x9,
         x1 => x11,
         x2 => x10
      );
   U_18 : Summing_Module
      PORT MAP (
         a  => o17,
         b  => o18,
         c  => o16,
         d  => o19,
         x0 => x12,
         x1 => x14,
         x2 => x13
      );
   U_0 : descrambler
      PORT MAP (
         d0  => d0(0),
         d1  => d0(1),
         d2  => d0(2),
         d3  => d0(3),
         d_0 => d_0,
         d_1 => d_1,
         d_2 => d_2,
         d_3 => d_3
      );
   U_4 : descrambler
      PORT MAP (
         d0  => d0(4),
         d1  => d0(5),
         d2  => d0(6),
         d3  => d0(7),
         d_0 => d_4,
         d_1 => d_7,
         d_2 => d_6,
         d_3 => d_5
      );
   U_8 : descrambler
      PORT MAP (
         d0  => d0(8),
         d1  => d0(9),
         d2  => d0(10),
         d3  => d0(11),
         d_0 => d_8,
         d_1 => d_11,
         d_2 => d_10,
         d_3 => d_9
      );
   U_12 : descrambler
      PORT MAP (
         d0  => d0(12),
         d1  => d0(13),
         d2  => d0(14),
         d3  => d0(15),
         d_0 => d_15,
         d_1 => d_14,
         d_2 => d_13,
         d_3 => d_12
      );
   U_16 : descrambler
      PORT MAP (
         d0  => d0(16),
         d1  => d0(17),
         d2  => d0(18),
         d3  => d0(19),
         d_0 => d_19,
         d_1 => d_18,
         d_2 => d_17,
         d_3 => d_16
      );
   U_1 : unlock
      PORT MAP (
         d0 => d_0,
         d1 => d_1,
         d2 => d_2,
         d3 => d_3,
         p0 => a,
         p1 => b,
         p2 => c,
         p3 => d,
         F  => o0,
         F1 => o1,
         F2 => o2,
         F3 => o3
      );
   U_5 : unlock
      PORT MAP (
         d0 => d_4,
         d1 => d_7,
         d2 => d_6,
         d3 => d_5,
         p0 => a,
         p1 => b,
         p2 => c,
         p3 => d,
         F  => o4,
         F1 => o5,
         F2 => o6,
         F3 => o7
      );
   U_9 : unlock
      PORT MAP (
         d0 => d_8,
         d1 => d_11,
         d2 => d_10,
         d3 => d_9,
         p0 => a,
         p1 => b,
         p2 => c,
         p3 => d,
         F  => o8,
         F1 => o9,
         F2 => o10,
         F3 => o11
      );
   U_13 : unlock
      PORT MAP (
         d0 => d_15,
         d1 => d_14,
         d2 => d_13,
         d3 => d_12,
         p0 => a,
         p1 => b,
         p2 => c,
         p3 => d,
         F  => o13,
         F1 => o14,
         F2 => o12,
         F3 => o15
      );
   U_17 : unlock
      PORT MAP (
         d0 => d_19,
         d1 => d_18,
         d2 => d_17,
         d3 => d_16,
         p0 => a,
         p1 => b,
         p2 => c,
         p3 => d,
         F  => o17,
         F1 => o18,
         F2 => o16,
         F3 => o19
      );

END struct;
